import { useCallback } from "react";
import { useToken } from "./useToken.js";
const notAuthenticatedState = {
  isAuthenticated: false,
  currentUser: null,
  userMetadata: null,
  loading: false,
  hasError: false
};
const useReauthenticate = (authImplementation, setAuthProviderState, getCurrentUser, skipFetchCurrentUser) => {
  const getToken = useToken(authImplementation);
  return useCallback(async () => {
    if (authImplementation.loadWhileReauthenticating) {
      setAuthProviderState((oldState) => ({
        ...oldState,
        loading: true
      }));
    }
    try {
      const userMetadata = await authImplementation.getUserMetadata();
      if (!userMetadata) {
        let loading = false;
        if (authImplementation.clientHasLoaded) {
          loading = !authImplementation.clientHasLoaded();
        }
        setAuthProviderState({
          ...notAuthenticatedState,
          loading,
          client: authImplementation.client
        });
      } else {
        await getToken();
        const currentUser = skipFetchCurrentUser ? null : await getCurrentUser();
        setAuthProviderState((oldState) => ({
          ...oldState,
          userMetadata,
          currentUser,
          isAuthenticated: true,
          loading: false,
          client: authImplementation.client
        }));
      }
    } catch (e) {
      setAuthProviderState({
        ...notAuthenticatedState,
        hasError: true,
        error: e
      });
    }
  }, [
    authImplementation,
    getToken,
    setAuthProviderState,
    skipFetchCurrentUser,
    getCurrentUser
  ]);
};
export {
  useReauthenticate
};
