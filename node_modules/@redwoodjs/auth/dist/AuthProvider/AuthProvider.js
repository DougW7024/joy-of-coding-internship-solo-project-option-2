import React, { useEffect, useState } from "react";
import { defaultAuthProviderState } from "./AuthProviderState.js";
import { useCurrentUser } from "./useCurrentUser.js";
import { useForgotPassword } from "./useForgotPassword.js";
import { useHasRole } from "./useHasRole.js";
import { useLogIn } from "./useLogIn.js";
import { useLogOut } from "./useLogOut.js";
import { useReauthenticate } from "./useReauthenticate.js";
import { useResetPassword } from "./useResetPassword.js";
import { useSignUp } from "./useSignUp.js";
import { useToken } from "./useToken.js";
import { useValidateResetToken } from "./useValidateResetToken.js";
function createAuthProvider(AuthContext, authImplementation, customProviderHooks) {
  const AuthProvider = ({
    children,
    skipFetchCurrentUser
  }) => {
    const [authProviderState, setAuthProviderState] = useState(defaultAuthProviderState);
    const getToken = useToken(authImplementation);
    const getCurrentUser = customProviderHooks?.useCurrentUser ? customProviderHooks.useCurrentUser : (
      // eslint-disable-next-line react-hooks/rules-of-hooks
      useCurrentUser(authImplementation)
    );
    const reauthenticate = useReauthenticate(
      authImplementation,
      setAuthProviderState,
      getCurrentUser,
      skipFetchCurrentUser
    );
    const hasRole = customProviderHooks?.useHasRole ? customProviderHooks.useHasRole(authProviderState.currentUser) : (
      // eslint-disable-next-line react-hooks/rules-of-hooks
      useHasRole(authProviderState.currentUser)
    );
    const signUp = useSignUp(
      authImplementation,
      setAuthProviderState,
      getCurrentUser,
      skipFetchCurrentUser
    );
    const logIn = useLogIn(
      authImplementation,
      setAuthProviderState,
      getCurrentUser,
      skipFetchCurrentUser
    );
    const logOut = useLogOut(authImplementation, setAuthProviderState);
    const forgotPassword = useForgotPassword(authImplementation);
    const resetPassword = useResetPassword(authImplementation);
    const validateResetToken = useValidateResetToken(authImplementation);
    const type = authImplementation.type;
    const client = authImplementation.client;
    useEffect(() => {
      async function doRestoreState() {
        await authImplementation.restoreAuthState?.();
        reauthenticate();
      }
      doRestoreState();
    }, [reauthenticate]);
    return /* @__PURE__ */ React.createElement(
      AuthContext.Provider,
      {
        value: {
          ...authProviderState,
          signUp,
          logIn,
          logOut,
          getToken,
          getCurrentUser,
          hasRole,
          reauthenticate,
          forgotPassword,
          resetPassword,
          validateResetToken,
          client,
          type
        }
      },
      children
    );
  };
  return AuthProvider;
}
export {
  createAuthProvider
};
