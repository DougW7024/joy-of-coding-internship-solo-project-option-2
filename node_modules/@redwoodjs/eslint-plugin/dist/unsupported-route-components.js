"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var unsupported_route_components_exports = {};
__export(unsupported_route_components_exports, {
  unsupportedRouteComponents: () => unsupportedRouteComponents
});
module.exports = __toCommonJS(unsupported_route_components_exports);
var import_utils = require("@typescript-eslint/utils");
const createRule = import_utils.ESLintUtils.RuleCreator.withoutDocs;
function isAllowedElement(name) {
  const allowedElements = ["Router", "Route", "Set", "PrivateSet", "Private"];
  return allowedElements.includes(name);
}
const unsupportedRouteComponents = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "Find unsupported route components",
      recommended: "error"
    },
    messages: {
      unexpected: "Unexpected JSX element <{{name}}>. Only <Router>, <Route>, <Set>, <PrivateSet> and <Private> are allowed in the Routes file."
    },
    schema: []
    // No additional configuration needed
  },
  defaultOptions: [],
  create(context) {
    return {
      JSXOpeningElement: function(node) {
        let name = "";
        if (node.name.type === "JSXIdentifier") {
          name = node.name.name;
        } else {
          return;
        }
        if (!isAllowedElement(name)) {
          context.report({
            node,
            messageId: "unexpected",
            data: { name }
          });
        }
      }
    };
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  unsupportedRouteComponents
});
