"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var service_type_annotations_exports = {};
__export(service_type_annotations_exports, {
  serviceTypeAnnotations: () => serviceTypeAnnotations
});
module.exports = __toCommonJS(service_type_annotations_exports);
var import_path = require("path");
const serviceTypeAnnotations = {
  create(context) {
    const thisFilename = (0, import_path.basename)(context.filename);
    const sansTS = thisFilename.replace(".ts", "");
    const thisFileCorrespondingImport = `types/${sansTS}`;
    let importForThisFile = null;
    return {
      // Make sure we have a reference to the import for the relative file
      // which includes definitions for this service
      ImportDeclaration(node) {
        importForThisFile ||= node.source.value === thisFileCorrespondingImport ? node : null;
      },
      // Then start looking at every exported fn/const
      ExportNamedDeclaration(node) {
        if (!node.declaration || !isVariableDeclaration(node.declaration)) {
          return;
        }
        node.declaration.declarations.forEach((vd) => {
          if (vd.type === "VariableDeclarator" && vd.id.type === "Identifier") {
            if (vd.id.name.startsWith("_")) {
              return;
            }
            const isGlobalOrMutationResolver = /^[a-z]/.test(vd.id.name);
            const suffix = isGlobalOrMutationResolver ? "Resolver" : "TypeResolvers";
            const typeName = capitalizeFirstLetter(vd.id.name) + suffix;
            if (isGlobalOrMutationResolver && vd.init?.type !== "ArrowFunctionExpression") {
              return;
            }
            const tsID = vd.id;
            if (!tsID.typeAnnotation) {
              context.report({
                messageId: "needsType",
                node: vd.id,
                data: {
                  name: vd.id.name,
                  typeName
                },
                *fix(fixer) {
                  yield fixer.insertTextAfter(vd.id, `: ${typeName}`);
                  if (!importForThisFile) {
                    yield fixer.insertTextBeforeRange(
                      [0, 0],
                      `import type { ${typeName} } from "${thisFileCorrespondingImport}"
`
                    );
                  } else {
                    const lastImportSpecifier = importForThisFile.specifiers[importForThisFile.specifiers.length - 1];
                    yield fixer.insertTextAfter(
                      lastImportSpecifier,
                      `, ${typeName}`
                    );
                  }
                }
              });
              return;
            }
            if (tsID.typeAnnotation.typeAnnotation) {
              const type = tsID.typeAnnotation.typeAnnotation;
              if (!("typeName" in type)) {
                return;
              }
              const isCorrectType = type.typeName?.type === "Identifier" && type.typeName?.name === typeName;
              if (isCorrectType) {
                return;
              }
              context.report({
                messageId: "needsType",
                node: vd.id,
                data: {
                  name: vd.id.name,
                  typeName
                },
                *fix(fixer) {
                  yield fixer.removeRange([type.range[0] - 2, type.range[1]]);
                  yield fixer.insertTextAfter(vd.id, `: ${typeName}`);
                  if (!importForThisFile) {
                    yield fixer.insertTextBeforeRange(
                      [0, 0],
                      `import type { ${typeName} } from "${thisFileCorrespondingImport}"
`
                    );
                  } else {
                    const lastImportSpecifier = importForThisFile.specifiers[importForThisFile.specifiers.length - 1];
                    yield fixer.insertTextAfter(
                      lastImportSpecifier,
                      `, ${typeName}`
                    );
                  }
                }
              });
            }
          }
        });
      }
    };
  },
  meta: {
    docs: {
      description: "Sets the types on a query/mutation resolver function to the correct type",
      recommended: false
    },
    messages: {
      needsType: "The query/mutation function ({{name}}) needs a type annotation of {{typeName}}."
    },
    fixable: "code",
    type: "suggestion"
  }
};
const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1);
const isVariableDeclaration = (node) => typeof node !== "undefined" && "declarations" in node;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  serviceTypeAnnotations
});
