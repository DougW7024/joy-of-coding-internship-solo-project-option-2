/// <reference types="react" />
import type { NavigateOptions } from './history';
import type { FlattenSearchParams } from './util';
interface LinkProps {
    to: string;
    onClick?: React.MouseEventHandler<HTMLAnchorElement>;
}
declare const Link: import("react").ForwardRefExoticComponent<LinkProps & import("react").AnchorHTMLAttributes<HTMLAnchorElement> & import("react").RefAttributes<HTMLAnchorElement>>;
interface NavLinkProps {
    to: string;
    activeClassName: string;
    activeMatchParams?: FlattenSearchParams;
    matchSubPaths?: boolean;
    onClick?: React.MouseEventHandler<HTMLAnchorElement>;
}
declare const NavLink: import("react").ForwardRefExoticComponent<NavLinkProps & import("react").AnchorHTMLAttributes<HTMLAnchorElement> & import("react").RefAttributes<HTMLAnchorElement>>;
interface RedirectProps {
    /** The path to redirect to */
    to: string;
    options?: NavigateOptions;
}
/**
 * A declarative way to redirect to a route name
 */
declare const Redirect: ({ to, options }: RedirectProps) => null;
export { Link, NavLink, Redirect };
//# sourceMappingURL=links.d.ts.map