"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.ActiveRouteLoader = void 0;
var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/set-timeout"));
var _globalThis2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/global-this"));
var _react = _interopRequireWildcard(require("react"));
var _a11yUtils = require("./a11yUtils");
var _PageLoadingContext = require("./PageLoadingContext");
var _util = require("./util");
var _jsxRuntime = require("react/jsx-runtime");
let isPrerendered = false;
if (typeof window !== 'undefined') {
  const redwoodAppElement = document.getElementById('redwood-app');
  if (redwoodAppElement && redwoodAppElement.children.length > 0) {
    isPrerendered = true;
  }
}
let firstLoad = true;
const Fallback = _ref => {
  let {
    children
  } = _ref;
  const {
    loading,
    setPageLoadingContext,
    delay
  } = (0, _PageLoadingContext.usePageLoadingContext)();
  (0, _react.useEffect)(() => {
    const timer = (0, _setTimeout2.default)(() => {
      setPageLoadingContext(true);
    }, delay);
    return () => {
      clearTimeout(timer);
      setPageLoadingContext(false);
    };
  }, [delay, setPageLoadingContext]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: loading ? children : null
  });
};
const ActiveRouteLoader = _ref2 => {
  let {
    spec,
    params,
    whileLoadingPage
  } = _ref2;
  const announcementRef = (0, _react.useRef)(null);
  const usePrerenderLoader = _globalThis2.default.__REDWOOD__PRERENDERING || isPrerendered && firstLoad;
  const LazyRouteComponent = usePrerenderLoader ? spec.prerenderLoader(spec.name).default : spec.LazyComponent;

  // After first load set to false to switch to client side fetching
  if (firstLoad) {
    firstLoad = false;
  }
  (0, _react.useEffect)(() => {
    // Make this hook a no-op if we're rendering in an iframe.
    if ((0, _util.inIframe)()) {
      return;
    }
    if (announcementRef.current) {
      announcementRef.current.innerText = (0, _a11yUtils.getAnnouncement)();
    }
    const routeFocus = (0, _a11yUtils.getFocus)();
    if (!routeFocus) {
      (0, _a11yUtils.resetFocus)();
    } else {
      routeFocus.focus();
    }
  }, [spec, params]);

  // Delete params ref & key so that they are not spread on to the component
  if (params) {
    delete params['ref'];
    delete params['key'];
  }

  // Level 3/3 (ActiveRouteLoader)
  // This is where we actually render the page component. Either using a
  // prerender loader or the lazy component
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Suspense, {
    fallback: /*#__PURE__*/(0, _jsxRuntime.jsx)(Fallback, {
      children: whileLoadingPage?.()
    }),
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(LazyRouteComponent, {
      ...params
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      id: "redwood-announcer",
      style: {
        position: 'absolute',
        top: 0,
        width: 1,
        height: 1,
        padding: 0,
        overflow: 'hidden',
        clip: 'rect(0, 0, 0, 0)',
        whiteSpace: 'nowrap',
        border: 0
      },
      role: "alert",
      "aria-live": "assertive",
      "aria-atomic": "true",
      ref: announcementRef
    })]
  });
};
exports.ActiveRouteLoader = ActiveRouteLoader;