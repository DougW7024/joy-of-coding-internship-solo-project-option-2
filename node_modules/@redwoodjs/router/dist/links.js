"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.Redirect = exports.NavLink = exports.Link = void 0;
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _react = require("react");
var _history = require("./history");
var _useMatch = require("./useMatch");
var _util = require("./util");
var _jsxRuntime = require("react/jsx-runtime");
const Link = exports.Link = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    to,
    onClick,
    ...rest
  } = _ref;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
    href: to,
    ref: ref,
    ...rest,
    onClick: event => {
      if (event.button !== 0 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
        return;
      }
      event.preventDefault();
      if (onClick) {
        const result = onClick(event);
        if (typeof result !== 'boolean' || result) {
          (0, _history.navigate)(to);
        }
      } else {
        (0, _history.navigate)(to);
      }
    }
  });
});
const NavLink = exports.NavLink = /*#__PURE__*/(0, _react.forwardRef)((_ref2, ref) => {
  var _context;
  let {
    to,
    activeClassName,
    activeMatchParams,
    matchSubPaths,
    className,
    onClick,
    ...rest
  } = _ref2;
  // Separate pathname and search parameters, USVString expected
  const [pathname, queryString] = to.split('?');
  const searchParams = activeMatchParams || (0, _util.flattenSearchParams)(queryString);
  const matchInfo = (0, _useMatch.useMatch)(pathname, {
    searchParams,
    matchSubPaths
  });
  const theClassName = (0, _filter.default)(_context = [className, matchInfo.match && activeClassName]).call(_context, Boolean).join(' ');
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
    href: to,
    ref: ref,
    className: theClassName,
    ...rest,
    onClick: event => {
      if (event.button !== 0 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
        return;
      }
      event.preventDefault();
      if (onClick) {
        const result = onClick(event);
        if (typeof result !== 'boolean' || result) {
          (0, _history.navigate)(to);
        }
      } else {
        (0, _history.navigate)(to);
      }
    }
  });
});
/**
 * A declarative way to redirect to a route name
 */
const Redirect = _ref3 => {
  let {
    to,
    options
  } = _ref3;
  (0, _react.useEffect)(() => {
    (0, _history.navigate)(to, options);
  }, [to, options]);
  return null;
};
exports.Redirect = Redirect;