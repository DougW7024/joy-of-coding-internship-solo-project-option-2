import type { ReactNode, ReactElement } from 'react';
import React from 'react';
import type { NotFoundRouteProps, RedirectRouteProps, RenderMode } from './route-validators';
import { isValidRoute, PageType } from './route-validators';
import type { RouterContextProviderProps } from './router-context';
import type { TrailingSlashesTypes } from './util';
import type { AvailableRoutes } from './index';
declare const namedRoutes: AvailableRoutes;
export interface RouteProps {
    path: string;
    page: PageType;
    name: string;
    prerender?: boolean;
    renderMode?: RenderMode;
    whileLoadingPage?: () => ReactElement | null;
}
/**
 * Route is now a "virtual" component
 * it is actually never rendered. All the page loading logic happens in active-route-loader
 * and all the validation happens within utility functions called from the Router
 */
declare function Route(props: RouteProps): JSX.Element;
declare function Route(props: RedirectRouteProps): JSX.Element;
declare function Route(props: NotFoundRouteProps): JSX.Element;
export interface RouterProps extends Omit<RouterContextProviderProps, 'routes' | 'activeRouteName'> {
    trailingSlashes?: TrailingSlashesTypes;
    pageLoadingDelay?: number;
    children: ReactNode;
}
declare const Router: React.FC<RouterProps>;
export { Router, Route, namedRoutes as routes, isValidRoute as isRoute, PageType, };
//# sourceMappingURL=router.d.ts.map