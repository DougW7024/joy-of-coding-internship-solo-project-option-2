"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthenticatedRoute = void 0;
var _globalThis2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/global-this"));
var _react = _interopRequireWildcard(require("react"));
var _links = require("./links");
var _router = require("./router");
var _routerContext = require("./router-context");
var _jsxRuntime = require("react/jsx-runtime");
const AuthenticatedRoute = _ref => {
  let {
    unauthenticated,
    roles,
    whileLoadingAuth,
    children
  } = _ref;
  const routerState = (0, _routerContext.useRouterState)();
  const {
    loading: authLoading,
    isAuthenticated,
    hasRole
  } = routerState.useAuth();
  const unauthorized = (0, _react.useCallback)(() => {
    return !(isAuthenticated && (!roles || hasRole(roles)));
  }, [isAuthenticated, roles, hasRole]);

  // Make sure `wrappers` is always an array with at least one wrapper component
  if (unauthorized()) {
    if (authLoading) {
      return whileLoadingAuth?.() || null;
    } else {
      const currentLocation = _globalThis2.default.location.pathname + encodeURIComponent(_globalThis2.default.location.search);

      // We reassign the type like this, because AvailableRoutes is generated in the user's project
      if (!_router.routes[unauthenticated]) {
        throw new Error(`We could not find a route named ${unauthenticated}`);
      }
      let unauthenticatedPath;
      try {
        unauthenticatedPath = _router.routes[unauthenticated]();
      } catch (e) {
        if (e instanceof Error && /Missing parameter .* for route/.test(e.message)) {
          throw new Error(`Redirecting to route "${unauthenticated}" would require route ` + 'parameters, which currently is not supported. Please choose ' + 'a different route');
        }
        throw new Error(`Could not redirect to the route named ${unauthenticated}`);
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_links.Redirect, {
        to: `${unauthenticatedPath}?redirectTo=${currentLocation}`
      });
    }
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: children
  });
};
exports.AuthenticatedRoute = AuthenticatedRoute;