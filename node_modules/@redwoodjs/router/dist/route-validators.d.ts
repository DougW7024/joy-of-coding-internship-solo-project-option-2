import type { ReactNode, ReactElement } from 'react';
import type { RouteProps } from './router';
import type { Spec } from './util';
export type RenderMode = 'stream' | 'html';
export type PageType = Spec | React.ComponentType<any> | ((props: any) => JSX.Element);
export interface RedirectRouteProps {
    redirect: string;
    path: string;
    name?: string;
}
export interface NotFoundRouteProps {
    notfound: boolean;
    page: PageType;
    prerender?: boolean;
    renderMode?: RenderMode;
}
export type InternalRouteProps = Partial<RouteProps & RedirectRouteProps & NotFoundRouteProps>;
/**
 * Narrows down the type of the Route element to RouteProps
 *
 * It means that it is not a notfound page or a redirected route
 *
 * @param node
 * @returns boolean
 */
export declare function isStandardRoute(node: ReactElement<InternalRouteProps>): node is ReactElement<RouteProps>;
/**
 *
 * Checks if a Route element is a Redirect Route
 *
 * @param node
 * @returns
 */
export declare function isRedirectRoute(node: ReactElement<InternalRouteProps>): node is ReactElement<RedirectRouteProps>;
/**
 *
 * Checks if a Route element is a Redirect Route
 *
 * @param node
 * @returns
 */
export declare function isNotFoundRoute(node: ReactElement<InternalRouteProps>): node is ReactElement<NotFoundRouteProps>;
/**
 * Check that the Route element is ok
 * and that it could be one of the following:
 * <Route redirect .../>  (ridirect Route)
 * <Route notfound .../>  (notfound Route)
 * <Route .../> (standard Route)
 *
 * @param node
 * @returns boolean
 */
export declare function isValidRoute(node: ReactNode): node is ReactElement<InternalRouteProps>;
//# sourceMappingURL=route-validators.d.ts.map