"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.isNotFoundRoute = isNotFoundRoute;
exports.isRedirectRoute = isRedirectRoute;
exports.isStandardRoute = isStandardRoute;
exports.isValidRoute = isValidRoute;
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _react = require("react");
var _router = require("./router");
const isNodeTypeRoute = node => {
  return /*#__PURE__*/(0, _react.isValidElement)(node) && node.type === _router.Route;
};
/**
 * Narrows down the type of the Route element to RouteProps
 *
 * It means that it is not a notfound page or a redirected route
 *
 * @param node
 * @returns boolean
 */

function isStandardRoute(node) {
  return !node.props.notfound && !node.props.redirect;
}
/**
 *
 * Checks if a Route element is a Redirect Route
 *
 * @param node
 * @returns
 */

function isRedirectRoute(node) {
  return !!node.props.redirect;
}
/**
 *
 * Checks if a Route element is a Redirect Route
 *
 * @param node
 * @returns
 */

function isNotFoundRoute(node) {
  return !!node.props.notfound;
}
/**
 * Check that the Route element is ok
 * and that it could be one of the following:
 * <Route redirect .../>  (ridirect Route)
 * <Route notfound .../>  (notfound Route)
 * <Route .../> (standard Route)
 *
 * @param node
 * @returns boolean
 */

function isValidRoute(node) {
  const isValidRouteElement = isNodeTypeRoute(node);

  // Throw inside here, because we know it's a Route otherwise it could be a Set or Private
  if (isValidRouteElement) {
    var _context;
    const notFoundOrRedirect = node.props.notfound || node.props.redirect;
    const requiredKeys = (0, _filter.default)(_context = [!node.props.notfound && 'path', !node.props.redirect && 'page',
    // redirects dont need an actual page, but notfound and standard do
    !notFoundOrRedirect && 'name' // this not so sure about! Redirects should have names too, but maybe we don't need to throw an error for it
    ]).call(_context, Boolean);
    const missingKeys = (0, _filter.default)(requiredKeys).call(requiredKeys, key => !(key in node.props));
    if (missingKeys.length > 0) {
      const stringToHelpIdentify = node.props.name || node.props.path ? `for "${node.props.name || node.props.path}" ` : '';
      throw new Error(`Route element ${stringToHelpIdentify}is missing required props: ${missingKeys.join(', ')}`);
    }
  }
  return isValidRouteElement;
}