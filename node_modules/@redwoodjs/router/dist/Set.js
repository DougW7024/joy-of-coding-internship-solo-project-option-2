"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.Private = Private;
exports.PrivateSet = PrivateSet;
exports.Set = Set;
exports.isSetNode = exports.isPrivateSetNode = exports.isPrivateNode = void 0;
var _react = _interopRequireDefault(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * TypeScript will often infer the type of the props you can forward to the
 * wrappers for you, but if you need to you can specify it yourself in your
 * JSX like so:
 *   <Set<{theme: string}> wrap={ThemeableLayout} theme="dark">
 */
function Set(props) {
  // @MARK: Virtual Component, this is actually never rendered
  // See analyzeRoutes in utils.tsx, inside the isSetNode block
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: props.children
  });
}
/** @deprecated Please use `<PrivateSet>` instead */
function Private(props) {
  // @MARK Virtual Component, this is actually never rendered
  // See analyzeRoutes in utils.tsx, inside the isSetNode block
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: props.children
  });
}
function PrivateSet(props) {
  // @MARK Virtual Component, this is actually never rendered
  // See analyzeRoutes in utils.tsx, inside the isSetNode block
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: props.children
  });
}
const isSetNode = node => {
  return /*#__PURE__*/_react.default.isValidElement(node) && (node.type === Set || node.type === PrivateSet || node.type === Private) &&
  // Don't even bother including Sets without children. They're useless.
  node.props.children;
};
exports.isSetNode = isSetNode;
const isPrivateSetNode = node => {
  return /*#__PURE__*/_react.default.isValidElement(node) && node.type === PrivateSet;
};

// Only identifies <Private> nodes, not <Set private> nodes
exports.isPrivateSetNode = isPrivateSetNode;
const isPrivateNode = node => {
  return /*#__PURE__*/_react.default.isValidElement(node) && node.type === Private;
};
exports.isPrivateNode = isPrivateNode;