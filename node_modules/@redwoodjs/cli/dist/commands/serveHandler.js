"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var serveHandler_exports = {};
__export(serveHandler_exports, {
  apiServerFileHandler: () => apiServerFileHandler,
  bothServerFileHandler: () => bothServerFileHandler
});
module.exports = __toCommonJS(serveHandler_exports);
var import_path = __toESM(require("path"));
var import_concurrently = __toESM(require("concurrently"));
var import_execa = __toESM(require("execa"));
var import_cliHelpers = require("@redwoodjs/api-server/dist/cliHelpers");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_exit = require("../lib/exit");
const bothServerFileHandler = async (options) => {
  options.apiPort ??= (0, import_cliHelpers.getAPIPort)();
  options.apiHost ??= (0, import_cliHelpers.getAPIHost)();
  options.webPort ??= (0, import_cliHelpers.getWebPort)();
  options.webHost ??= (0, import_cliHelpers.getWebHost)();
  const apiProxyTarget = [
    "http://",
    options.apiHost.includes(":") ? `[${options.apiHost}]` : options.apiHost,
    ":",
    options.apiPort,
    options.apiRootPath
  ].join("");
  const { result } = (0, import_concurrently.default)(
    [
      {
        name: "api",
        command: `yarn node ${import_path.default.join("dist", "server.js")} --apiPort ${options.apiPort} --apiHost ${options.apiHost} --apiRootPath ${options.apiRootPath}`,
        cwd: (0, import_project_config.getPaths)().api.base,
        prefixColor: "cyan"
      },
      {
        name: "web",
        command: `yarn rw-web-server --port ${options.webPort} --host ${options.webHost} --api-proxy-target ${apiProxyTarget}`,
        cwd: (0, import_project_config.getPaths)().base,
        prefixColor: "blue"
      }
    ],
    {
      prefix: "{name} |",
      timestampFormat: "HH:mm:ss",
      handleInput: true
    }
  );
  try {
    await result;
  } catch (error) {
    if (typeof error?.message !== "undefined") {
      (0, import_telemetry.errorTelemetry)(
        process.argv,
        `Error concurrently starting sides: ${error.message}`
      );
      (0, import_exit.exitWithError)(error);
    }
  }
};
const apiServerFileHandler = async (options) => {
  const args = ["node", "server.js", "--apiRootPath", options.apiRootPath];
  if (options.port) {
    args.push("--apiPort", options.port);
  }
  await (0, import_execa.default)("yarn", args, {
    cwd: (0, import_project_config.getPaths)().api.dist,
    stdio: "inherit"
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  apiServerFileHandler,
  bothServerFileHandler
});
