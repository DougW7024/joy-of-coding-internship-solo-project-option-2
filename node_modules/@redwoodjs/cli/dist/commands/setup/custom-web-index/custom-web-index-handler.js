"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var custom_web_index_handler_exports = {};
__export(custom_web_index_handler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(custom_web_index_handler_exports);
var import_path = __toESM(require("path"));
var import_chalk = __toESM(require("chalk"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
const handler = async ({ force }) => {
  if ((0, import_lib.getPaths)().web.viteConfig) {
    console.warn(
      import_colors.default.warning("Warning: This command only applies to projects using webpack")
    );
    return;
  }
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Creating new entry point in `web/src/index.js`.",
        task: () => {
          const entryPointFile = (0, import_lib.getPaths)().web.index ?? import_path.default.join((0, import_lib.getPaths)().web.src, "index.js");
          return (0, import_lib.writeFile)(
            entryPointFile,
            import_fs_extra.default.readFileSync(
              import_path.default.join(
                (0, import_lib.getPaths)().base,
                // NOTE we're copying over the index.js before babel transform
                "node_modules/@redwoodjs/web/src/entry/index.js"
              )
            ).toString().replace("~redwood-app-root", "./App"),
            { overwriteExisting: force }
          );
        }
      },
      {
        title: "One more thing...",
        task: (_ctx, task) => {
          task.title = `One more thing...

          ${import_colors.default.green(
            "Quick link to the docs on configuring a custom entry point for your RW app"
          )}
          ${import_chalk.default.hex("#e8e8e8")("https://redwoodjs.com/docs/custom-web-index")}
        `;
        }
      }
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
