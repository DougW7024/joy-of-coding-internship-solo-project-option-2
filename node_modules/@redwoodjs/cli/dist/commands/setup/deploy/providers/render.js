"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var render_exports = {};
__export(render_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  getRenderYamlContent: () => getRenderYamlContent,
  handler: () => handler
});
module.exports = __toCommonJS(render_exports);
var import_path = __toESM(require("path"));
var import_internals = require("@prisma/internals");
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../../lib");
var import_colors = __toESM(require("../../../../lib/colors"));
var import_helpers = require("../helpers");
var import_render = require("../templates/render");
const command = "render";
const description = "Setup Render deploy";
const getRenderYamlContent = async (database) => {
  if (database === "none") {
    return {
      path: import_path.default.join((0, import_lib.getPaths)().base, "render.yaml"),
      content: (0, import_render.RENDER_YAML)("")
    };
  }
  if (!import_fs_extra.default.existsSync("api/db/schema.prisma")) {
    throw new Error("Could not find prisma schema at 'api/db/schema.prisma'");
  }
  const schema = await (0, import_internals.getSchema)("api/db/schema.prisma");
  const config = await (0, import_internals.getConfig)({ datamodel: schema });
  const detectedDatabase = config.datasources[0].activeProvider;
  if (detectedDatabase === database) {
    switch (database) {
      case "postgresql":
        return {
          path: import_path.default.join((0, import_lib.getPaths)().base, "render.yaml"),
          content: (0, import_render.RENDER_YAML)(import_render.POSTGRES_YAML)
        };
      case "sqlite":
        return {
          path: import_path.default.join((0, import_lib.getPaths)().base, "render.yaml"),
          content: (0, import_render.RENDER_YAML)(import_render.SQLITE_YAML)
        };
      default:
        throw new Error(`
       Unexpected datasource provider found: ${database}`);
    }
  } else {
    throw new Error(`
    Prisma datasource provider is detected to be ${detectedDatabase}.

    Option 1: Update your schema.prisma provider to be ${database}, then run
    yarn rw prisma migrate dev
    yarn rw setup deploy render --database ${database}

    Option 2: Rerun setup deploy command with current schema.prisma provider:
    yarn rw setup deploy render --database ${detectedDatabase}`);
  }
};
const builder = (yargs) => yargs.option("database", {
  alias: "d",
  choices: ["none", "postgresql", "sqlite"],
  description: "Database deployment for Render only",
  default: "postgresql",
  type: "string"
});
const notes = [
  "You are ready to deploy to Render!\n",
  "Go to https://dashboard.render.com/iacs to create your account and deploy to Render",
  "Check out the deployment docs at https://render.com/docs/deploy-redwood for detailed instructions",
  "Note: After first deployment to Render update the rewrite rule destination in `./render.yaml`"
];
const additionalFiles = [
  {
    path: import_path.default.join((0, import_lib.getPaths)().base, "api/src/functions/healthz.js"),
    content: import_render.RENDER_HEALTH_CHECK
  }
];
const handler = async ({ force, database }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "setup deploy render",
    force,
    database
  });
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Adding render.yaml",
        task: async () => {
          const fileData = await getRenderYamlContent(database);
          let files = {};
          files[fileData.path] = fileData.content;
          return (0, import_lib.writeFilesTask)(files, { overwriteExisting: force });
        }
      },
      (0, import_helpers.updateApiURLTask)("/.redwood/functions"),
      // Add health check api function
      (0, import_helpers.addFilesTask)({
        files: additionalFiles,
        force
      }),
      (0, import_lib.printSetupNotes)(notes)
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  getRenderYamlContent,
  handler
});
