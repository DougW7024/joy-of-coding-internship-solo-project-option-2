"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var edgio_exports = {};
__export(edgio_exports, {
  command: () => command,
  deprecated: () => deprecated,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(edgio_exports);
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../../lib");
var import_colors = __toESM(require("../../../../lib/colors"));
var import_edgio = require("../../../deploy/edgio");
var import_helpers = require("../helpers");
const command = "edgio";
const description = "[DEPRECATED]\nSetup Edgio deploy";
const deprecated = true;
const notes = [
  import_colors.default.error("DEPRECATED option not officially supported"),
  "",
  "For more information:",
  "https://redwoodjs.com/docs/deploy/edgio",
  "",
  "You are almost ready to deploy to Edgio!",
  "",
  "See https://redwoodjs.com/docs/deploy#edgio-deploy for the remaining",
  "config and setup required before you can perform your first deploy."
];
const prismaBinaryTargetAdditions = () => {
  const content = import_fs_extra.default.readFileSync((0, import_lib.getPaths)().api.dbSchema).toString();
  if (!content.includes("rhel-openssl-1.0.x")) {
    const result = content.replace(
      /binaryTargets =.*\n/,
      `binaryTargets = ["native", "rhel-openssl-1.0.x"]
`
    );
    import_fs_extra.default.writeFileSync((0, import_lib.getPaths)().api.dbSchema, result);
  }
};
const handler = async () => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "setup deploy edgio"
  });
  const tasks = new import_listr2.Listr(
    [
      (0, import_lib.addPackagesTask)({
        packages: ["@edgio/cli"],
        devDependency: true
      }),
      (0, import_helpers.preRequisiteCheckTask)([
        {
          title: "Checking if Edgio is installed...",
          command: ["yarn", ["edgio", "--version"]],
          errorMessage: import_edgio.ERR_MESSAGE_MISSING_CLI
        },
        {
          title: "Initializing with Edgio",
          command: ["yarn", ["edgio", "init"]],
          errorMessage: import_edgio.ERR_MESSAGE_NOT_INITIALIZED
        }
      ]),
      {
        title: "Adding necessary Prisma binaries...",
        task: () => prismaBinaryTargetAdditions()
      },
      (0, import_lib.printSetupNotes)(notes)
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  command,
  deprecated,
  description,
  handler
});
