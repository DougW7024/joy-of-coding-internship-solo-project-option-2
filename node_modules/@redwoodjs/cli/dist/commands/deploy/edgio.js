"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var edgio_exports = {};
__export(edgio_exports, {
  ERR_MESSAGE_MISSING_CLI: () => ERR_MESSAGE_MISSING_CLI,
  ERR_MESSAGE_NOT_INITIALIZED: () => ERR_MESSAGE_NOT_INITIALIZED,
  buildErrorMessage: () => buildErrorMessage,
  builder: () => builder,
  command: () => command,
  deprecated: () => deprecated,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(edgio_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_lodash = require("lodash");
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
var import_colors = __toESM(require("../../lib/colors"));
var import_helpers = require("./helpers/helpers");
const command = "edgio [...commands]";
const description = "Build command for Edgio deploy";
const deprecated = true;
const builder = async (yargs) => {
  const { builder: edgioBuilder } = require("@edgio/cli/commands/deploy");
  (0, import_helpers.deployBuilder)(yargs);
  edgioBuilder["skip-init"] = {
    type: "boolean",
    description: [
      "Edgio will attempt to initialize your project before deployment.",
      "If your project has already been initialized and you wish to skip",
      "this step, set this to `true`"
    ].join(" "),
    default: false
  };
  yargs.options(edgioBuilder).group(
    Object.keys((0, import_lodash.omit)(edgioBuilder, ["skip-init"])),
    "Edgio deploy options:"
  );
};
const execaOptions = {
  cwd: import_path.default.join((0, import_project_config.getPaths)().base),
  shell: true,
  stdio: "inherit",
  cleanup: true
};
const handler = async (args) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "deploy edgio",
    skipInit: args.skipInit,
    build: args.build,
    prisma: args.prisma,
    dataMigrate: args.dataMigrate
  });
  const { builder: edgioBuilder } = require("@edgio/cli/commands/deploy");
  const cwd = import_path.default.join((0, import_project_config.getPaths)().base);
  try {
    await (0, import_execa.default)("yarn", ["edgio", "--version"], execaOptions);
  } catch (e) {
    logAndExit(ERR_MESSAGE_MISSING_CLI);
  }
  const configExists = await import_fs_extra.default.pathExists(import_path.default.join(cwd, "edgio.config.js"));
  if (!configExists) {
    if (args.skipInit) {
      logAndExit(ERR_MESSAGE_NOT_INITIALIZED);
    }
    await (0, import_execa.default)("yarn", ["edgio", "init"], execaOptions);
  }
  await (0, import_helpers.deployHandler)(args);
  const deployArgs = Object.keys(edgioBuilder).reduce((acc, key) => {
    if (args[key]) {
      acc.push(`--${key}=${args[key]}`);
    }
    return acc;
  }, []);
  if (!args.skipBuild) {
    deployArgs.push("--skip-build");
    await (0, import_execa.default)("yarn", ["edgio", "build", "--skip-framework"], execaOptions);
  }
  await (0, import_execa.default)("yarn", ["edgio", "deploy", ...deployArgs], execaOptions);
};
const ERR_MESSAGE_MISSING_CLI = buildErrorMessage(
  "Edgio not found!",
  [
    "It looks like Edgio is not configured for your project.",
    "Run the following to add Edgio to your project:",
    `  ${import_colors.default.info("yarn add -D @edgio/cli")}`
  ].join("\n")
);
const ERR_MESSAGE_NOT_INITIALIZED = buildErrorMessage(
  "Edgio not initialized!",
  [
    "It looks like Edgio is not configured for your project.",
    "Run the following to initialize Edgio on your project:",
    `  ${import_colors.default.info("yarn edgio init")}`
  ].join("\n")
);
function buildErrorMessage(title, message) {
  return [
    import_colors.default.bold(import_colors.default.error(title)),
    "",
    message,
    "",
    `Also see the ${(0, import_terminal_link.default)(
      "RedwoodJS on Edgio Guide",
      "https://docs.edg.io/guides/redwoodjs"
    )} for additional resources.`,
    ""
  ].join("\n");
}
function logAndExit(message) {
  console.log(message);
  process.exit(1);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ERR_MESSAGE_MISSING_CLI,
  ERR_MESSAGE_NOT_INITIALIZED,
  buildErrorMessage,
  builder,
  command,
  deprecated,
  description,
  handler
});
