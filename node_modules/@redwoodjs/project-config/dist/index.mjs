// src/config.ts
import fs2 from "fs";
import merge from "deepmerge";
import * as toml from "smol-toml";
import { env as envInterpolation } from "string-env-interpolation";

// src/findUp.ts
import fs from "fs";
import path from "path";
function findUp(file, startingDirectory = process.cwd()) {
  const possibleFilepath = path.join(startingDirectory, file);
  if (fs.existsSync(possibleFilepath)) {
    return possibleFilepath;
  }
  const parentDirectory = path.dirname(startingDirectory);
  if (parentDirectory === startingDirectory) {
    return null;
  }
  return findUp(file, parentDirectory);
}

// src/configPath.ts
var CONFIG_FILE_NAME = "redwood.toml";
var getConfigPathCache = /* @__PURE__ */ new Map();
var getConfigPath = (cwd = process.env.RWJS_CWD ?? process.cwd()) => {
  if (getConfigPathCache.has(cwd)) {
    return getConfigPathCache.get(cwd);
  }
  const configPath = findUp(CONFIG_FILE_NAME, cwd);
  if (!configPath) {
    throw new Error(
      `Could not find a "${CONFIG_FILE_NAME}" file, are you sure you're in a Redwood project?`
    );
  }
  getConfigPathCache.set(cwd, configPath);
  return configPath;
};

// src/config.ts
var TargetEnum = /* @__PURE__ */ ((TargetEnum2) => {
  TargetEnum2["NODE"] = "node";
  TargetEnum2["BROWSER"] = "browser";
  TargetEnum2["REACT_NATIVE"] = "react-native";
  TargetEnum2["ELECTRON"] = "electron";
  return TargetEnum2;
})(TargetEnum || {});
var BundlerEnum = /* @__PURE__ */ ((BundlerEnum2) => {
  BundlerEnum2["WEBPACK"] = "webpack";
  BundlerEnum2["VITE"] = "vite";
  return BundlerEnum2;
})(BundlerEnum || {});
var DEFAULT_CONFIG = {
  web: {
    title: "Redwood App",
    port: 8910,
    path: "./web",
    target: "browser" /* BROWSER */,
    bundler: "vite" /* VITE */,
    includeEnvironmentVariables: [],
    apiUrl: "/.redwood/functions",
    fastRefresh: true,
    a11y: true,
    sourceMap: false
  },
  api: {
    title: "Redwood App",
    port: 8911,
    path: "./api",
    target: "node" /* NODE */,
    schemaPath: "./api/db/schema.prisma",
    serverConfig: "./api/server.config.js",
    debugPort: 18911
  },
  graphql: { fragments: false, trustedDocuments: false },
  browser: {
    open: false
  },
  generate: {
    tests: true,
    stories: true,
    nestScaffoldByModel: true
  },
  notifications: {
    versionUpdates: []
  },
  studio: {
    basePort: 4318,
    graphiql: {
      authImpersonation: {
        authProvider: void 0,
        userId: void 0,
        email: void 0,
        jwtSecret: "secret"
      }
    }
  },
  experimental: {
    opentelemetry: {
      enabled: false,
      wrapApi: true
    },
    cli: {
      autoInstall: true,
      plugins: [
        {
          package: "@redwoodjs/cli-storybook"
        },
        {
          package: "@redwoodjs/cli-storybook-vite"
        },
        {
          package: "@redwoodjs/cli-data-migrate"
        }
      ]
    },
    useSDLCodeGenForGraphQLTypes: false,
    realtime: {
      enabled: false
    },
    reactCompiler: {
      enabled: false,
      lintOnly: false
    }
  }
};
var getConfig = (configPath = getConfigPath()) => {
  try {
    return merge(DEFAULT_CONFIG, getRawConfig(configPath));
  } catch (e) {
    throw new Error(`Could not parse "${configPath}": ${e}`);
  }
};
function getRawConfig(configPath = getConfigPath()) {
  try {
    return toml.parse(envInterpolation(fs2.readFileSync(configPath, "utf8")));
  } catch (e) {
    throw new Error(`Could not parse "${configPath}": ${e}`);
  }
}

// src/paths.ts
import fs3 from "fs";
import path2 from "path";
import fg from "fast-glob";
var PATH_API_DIR_FUNCTIONS = "api/src/functions";
var PATH_RW_SCRIPTS = "scripts";
var PATH_API_DIR_GRAPHQL = "api/src/graphql";
var PATH_API_DIR_CONFIG = "api/src/config";
var PATH_API_DIR_MODELS = "api/src/models";
var PATH_API_DIR_LIB = "api/src/lib";
var PATH_API_DIR_GENERATORS = "api/generators";
var PATH_API_DIR_SERVICES = "api/src/services";
var PATH_API_DIR_DIRECTIVES = "api/src/directives";
var PATH_API_DIR_SUBSCRIPTIONS = "api/src/subscriptions";
var PATH_API_DIR_SRC = "api/src";
var PATH_WEB_ROUTES = "web/src/Routes";
var PATH_WEB_DIR_LAYOUTS = "web/src/layouts/";
var PATH_WEB_DIR_PAGES = "web/src/pages/";
var PATH_WEB_DIR_COMPONENTS = "web/src/components";
var PATH_WEB_DIR_STORYBOOK_CONFIG = "web/.storybook";
var PATH_WEB_DIR_SRC = "web/src";
var PATH_WEB_DIR_SRC_APP = "web/src/App";
var PATH_WEB_DIR_SRC_INDEX = "web/src/index";
var PATH_WEB_INDEX_HTML = "web/src/index.html";
var PATH_WEB_DIR_GENERATORS = "web/generators";
var PATH_WEB_DIR_CONFIG = "web/config";
var PATH_WEB_DIR_CONFIG_WEBPACK = "web/config/webpack.config.js";
var PATH_WEB_DIR_CONFIG_VITE = "web/vite.config";
var PATH_WEB_DIR_ENTRY_CLIENT = "web/src/entry.client";
var PATH_WEB_DIR_GRAPHQL = "web/src/graphql";
var PATH_WEB_DIR_CONFIG_POSTCSS = "web/config/postcss.config.js";
var PATH_WEB_DIR_CONFIG_STORYBOOK_CONFIG = "web/config/storybook.config.js";
var PATH_WEB_DIR_CONFIG_STORYBOOK_PREVIEW = "web/config/storybook.preview";
var PATH_WEB_DIR_CONFIG_STORYBOOK_MANAGER = "web/config/storybook.manager.js";
var PATH_WEB_DIR_DIST = "web/dist";
var getBaseDir = (configPath = getConfigPath()) => {
  return path2.dirname(configPath);
};
var getBaseDirFromFile = (file) => {
  return getBaseDir(getConfigPath(path2.dirname(file)));
};
var resolveFile = (filePath, extensions = [".js", ".tsx", ".ts", ".jsx"]) => {
  for (const extension of extensions) {
    const p = `${filePath}${extension}`;
    if (fs3.existsSync(p)) {
      return p;
    }
  }
  return null;
};
var getPathsCache = /* @__PURE__ */ new Map();
var getPaths = (BASE_DIR = getBaseDir()) => {
  if (getPathsCache.has(BASE_DIR)) {
    return getPathsCache.get(BASE_DIR);
  }
  const routes = resolveFile(path2.join(BASE_DIR, PATH_WEB_ROUTES));
  const { schemaPath } = getConfig(getConfigPath(BASE_DIR)).api;
  const schemaDir = path2.dirname(schemaPath);
  const paths = {
    base: BASE_DIR,
    generated: {
      base: path2.join(BASE_DIR, ".redwood"),
      schema: path2.join(BASE_DIR, ".redwood/schema.graphql"),
      types: {
        includes: path2.join(BASE_DIR, ".redwood/types/includes"),
        mirror: path2.join(BASE_DIR, ".redwood/types/mirror")
      },
      prebuild: path2.join(BASE_DIR, ".redwood/prebuild")
    },
    scripts: path2.join(BASE_DIR, PATH_RW_SCRIPTS),
    api: {
      base: path2.join(BASE_DIR, "api"),
      dataMigrations: path2.join(BASE_DIR, schemaDir, "dataMigrations"),
      db: path2.join(BASE_DIR, schemaDir),
      dbSchema: path2.join(BASE_DIR, schemaPath),
      functions: path2.join(BASE_DIR, PATH_API_DIR_FUNCTIONS),
      graphql: path2.join(BASE_DIR, PATH_API_DIR_GRAPHQL),
      lib: path2.join(BASE_DIR, PATH_API_DIR_LIB),
      generators: path2.join(BASE_DIR, PATH_API_DIR_GENERATORS),
      config: path2.join(BASE_DIR, PATH_API_DIR_CONFIG),
      services: path2.join(BASE_DIR, PATH_API_DIR_SERVICES),
      directives: path2.join(BASE_DIR, PATH_API_DIR_DIRECTIVES),
      subscriptions: path2.join(BASE_DIR, PATH_API_DIR_SUBSCRIPTIONS),
      src: path2.join(BASE_DIR, PATH_API_DIR_SRC),
      dist: path2.join(BASE_DIR, "api/dist"),
      types: path2.join(BASE_DIR, "api/types"),
      models: path2.join(BASE_DIR, PATH_API_DIR_MODELS),
      mail: path2.join(BASE_DIR, PATH_API_DIR_SRC, "mail")
    },
    web: {
      routes,
      base: path2.join(BASE_DIR, "web"),
      pages: path2.join(BASE_DIR, PATH_WEB_DIR_PAGES),
      components: path2.join(BASE_DIR, PATH_WEB_DIR_COMPONENTS),
      layouts: path2.join(BASE_DIR, PATH_WEB_DIR_LAYOUTS),
      src: path2.join(BASE_DIR, PATH_WEB_DIR_SRC),
      storybook: path2.join(BASE_DIR, PATH_WEB_DIR_STORYBOOK_CONFIG),
      generators: path2.join(BASE_DIR, PATH_WEB_DIR_GENERATORS),
      app: resolveFile(path2.join(BASE_DIR, PATH_WEB_DIR_SRC_APP)),
      index: resolveFile(path2.join(BASE_DIR, PATH_WEB_DIR_SRC_INDEX)),
      // old webpack entry point
      html: path2.join(BASE_DIR, PATH_WEB_INDEX_HTML),
      config: path2.join(BASE_DIR, PATH_WEB_DIR_CONFIG),
      webpack: path2.join(BASE_DIR, PATH_WEB_DIR_CONFIG_WEBPACK),
      viteConfig: resolveFile(path2.join(BASE_DIR, PATH_WEB_DIR_CONFIG_VITE)),
      postcss: path2.join(BASE_DIR, PATH_WEB_DIR_CONFIG_POSTCSS),
      storybookConfig: path2.join(
        BASE_DIR,
        PATH_WEB_DIR_CONFIG_STORYBOOK_CONFIG
      ),
      storybookPreviewConfig: resolveFile(
        path2.join(BASE_DIR, PATH_WEB_DIR_CONFIG_STORYBOOK_PREVIEW)
      ),
      storybookManagerConfig: path2.join(
        BASE_DIR,
        PATH_WEB_DIR_CONFIG_STORYBOOK_MANAGER
      ),
      dist: path2.join(BASE_DIR, PATH_WEB_DIR_DIST),
      types: path2.join(BASE_DIR, "web/types"),
      entryClient: resolveFile(path2.join(BASE_DIR, PATH_WEB_DIR_ENTRY_CLIENT)),
      // new vite/stream entry point for client
      graphql: path2.join(BASE_DIR, PATH_WEB_DIR_GRAPHQL)
    }
  };
  fs3.mkdirSync(paths.generated.types.includes, { recursive: true });
  fs3.mkdirSync(paths.generated.types.mirror, { recursive: true });
  getPathsCache.set(BASE_DIR, paths);
  return paths;
};
var processPagesDir = (webPagesDir = getPaths().web.pages) => {
  const pagePaths = fg.sync("**/*Page.{js,jsx,ts,tsx}", {
    cwd: webPagesDir,
    ignore: ["node_modules"]
  });
  return pagePaths.map((pagePath) => {
    const p = path2.parse(pagePath);
    const importName = p.dir.replace(/\//g, "");
    const importPath = importStatementPath(
      path2.join(webPagesDir, p.dir, p.name)
    );
    const importStatement = `const ${importName} = { name: '${importName}', loader: import('${importPath}') }`;
    return {
      importName,
      const: importName,
      importPath,
      path: path2.join(webPagesDir, pagePath),
      importStatement
    };
  });
};
var ensurePosixPath = (path3) => {
  let posixPath = path3;
  if (process.platform === "win32") {
    if (/^[A-Z]:\\/.test(path3)) {
      const drive = path3[0].toLowerCase();
      posixPath = `/${drive}/${path3.substring(3)}`;
    }
    posixPath = posixPath.replace(/\\/g, "/");
  }
  return posixPath;
};
var importStatementPath = (path3) => {
  let importPath = path3;
  if (process.platform === "win32") {
    importPath = importPath.replaceAll("\\", "/");
  }
  return importPath;
};
function packageJsonIsEsm(packageJsonPath) {
  const packageJsonContents = JSON.parse(
    fs3.readFileSync(packageJsonPath, "utf-8")
  );
  return packageJsonContents.type === "module";
}
function projectRootIsEsm() {
  return packageJsonIsEsm(path2.join(getPaths().base, "package.json"));
}
function projectSideIsEsm(side) {
  const redwoodProjectPaths = getPaths();
  return packageJsonIsEsm(
    path2.join(redwoodProjectPaths[side].base, "package.json")
  );
}
function projectIsEsm() {
  if (!projectRootIsEsm()) {
    return false;
  }
  for (const side of ["api", "web"]) {
    if (!projectSideIsEsm(side)) {
      return false;
    }
  }
  return true;
}
export {
  BundlerEnum,
  TargetEnum,
  ensurePosixPath,
  findUp,
  getBaseDir,
  getBaseDirFromFile,
  getConfig,
  getConfigPath,
  getPaths,
  getRawConfig,
  importStatementPath,
  processPagesDir,
  projectIsEsm,
  projectRootIsEsm,
  projectSideIsEsm,
  resolveFile
};
