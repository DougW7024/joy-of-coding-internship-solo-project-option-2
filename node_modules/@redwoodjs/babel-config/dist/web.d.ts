import * as babel from '@babel/core';
import type { TransformOptions } from '@babel/core';
import type { RegisterHookOptions } from './common';
export interface Flags {
    forJest?: boolean;
    forPrerender?: boolean;
    forVite?: boolean;
}
export declare const getWebSideBabelPlugins: ({ forJest, forVite }?: Flags) => babel.TransformOptions[];
export declare const getWebSideOverrides: ({ forPrerender, forVite }?: Flags) => Array<TransformOptions>;
export declare const getWebSideBabelPresets: (options: Flags) => ((string | undefined)[] | (string | object)[])[];
export declare const getWebSideBabelConfigPath: () => string | undefined;
export declare const getWebSideDefaultBabelConfig: (options?: Flags) => {
    presets: ((string | undefined)[] | (string | object)[])[];
    plugins: babel.TransformOptions[];
    overrides: babel.TransformOptions[];
    extends: string | undefined;
    babelrc: boolean;
    ignore: string[];
};
export declare const registerWebSideBabelHook: ({ forVite, plugins, overrides, }?: RegisterHookOptions & {
    forVite?: boolean;
}) => void;
export declare const prebuildWebFile: (srcPath: string, flags?: Flags) => babel.BabelFileResult | null;
//# sourceMappingURL=web.d.ts.map