"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.useErrorStyles = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactHookForm = require("react-hook-form");
var _ServerErrorsContext = require("./ServerErrorsContext");
/**
 * Adds styling to a field when an error is present.
 *
 * @remarks
 *
 * Mostly just a `useEffect` hook.
 *
 * `className` and `style` get swapped with `errorClassName` and `errorStyle` respectively
 * when an error's present (on the server or otherwise).
 */
const useErrorStyles = _ref => {
  let {
    name,
    errorClassName,
    errorStyle,
    className,
    style
  } = _ref;
  const {
    formState: {
      errors
    },
    setError
  } = (0, _reactHookForm.useFormContext)();
  const serverError = (0, _react.useContext)(_ServerErrorsContext.ServerErrorsContext)[name];
  _react.default.useEffect(() => {
    if (serverError) {
      setError(name, {
        type: 'server',
        message: serverError
      });
    }
  }, [serverError, name, setError]);
  const validationError = name ? (0, _reactHookForm.get)(errors, name) : undefined;
  if (validationError) {
    if (errorClassName) {
      className = errorClassName;
    }
    if (errorStyle) {
      style = errorStyle;
    }
  }
  return {
    className,
    style
  };
};
exports.useErrorStyles = useErrorStyles;