"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.WeekField = exports.UrlField = exports.TimeField = exports.TextField = exports.TelField = exports.SubmitField = exports.SearchField = exports.ResetField = exports.RangeField = exports.RadioField = exports.PasswordField = exports.NumberField = exports.MonthField = exports.InputField = exports.ImageField = exports.HiddenField = exports.FileField = exports.EmailField = exports.DatetimeLocalField = exports.DateField = exports.ColorField = exports.ButtonField = void 0;
var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));
var _react = _interopRequireWildcard(require("react"));
var _pascalcase = _interopRequireDefault(require("pascalcase"));
var _useErrorStyles = require("./useErrorStyles");
var _useRegister = require("./useRegister");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * All the types we'll be generating named `<InputFields>` for (which is basically all of them).
 * Note that `'checkbox'` isn't here because we handle it separately above.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types}
 */const INPUT_TYPES = ['button', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];
/**
 * Renders an `<input>` field.
 *
 * @see {@link https://redwoodjs.com/docs/forms#input-fields}
 */
const InputField = exports.InputField = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    name,
    id,
    emptyAs,
    // for useErrorStyles
    errorClassName,
    errorStyle,
    className,
    style,
    // for useRegister
    validation,
    onBlur,
    onChange,
    type,
    ...rest
  } = _ref;
  const styles = (0, _useErrorStyles.useErrorStyles)({
    name,
    errorClassName,
    errorStyle,
    className,
    style
  });
  const useRegisterReturn = (0, _useRegister.useRegister)({
    name,
    validation,
    onBlur,
    onChange,
    type
  }, ref, emptyAs);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
    id: id || name,
    ...rest,
    type: type,
    ...styles,
    ...useRegisterReturn
  });
});

/**
 * `React.ForwardRefExoticComponent` is `forwardRef`'s return type.
 * You can hover over `<InputField>` above to see the type inference at work.
 */
const InputComponents = {};

/**
 * Create a component for each type in `INPUT_TYPES`.
 *
 * Rather than writing out each and every component definition,
 * we use a bit of JS metaprogramming to create them all with the appropriate name.
 *
 * We end up with `InputComponents.TextField`, `InputComponents.TimeField`, etc.
 * Export those and we're good to go!
 */
(0, _forEach.default)(INPUT_TYPES).call(INPUT_TYPES, type => {
  InputComponents[`${(0, _pascalcase.default)(type)}Field`] = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => /*#__PURE__*/(0, _jsxRuntime.jsx)(InputField, {
    ref: ref,
    type: type,
    ...props
  }));
});
const {
  ButtonField,
  ColorField,
  DateField,
  DatetimeLocalField,
  EmailField,
  FileField,
  HiddenField,
  ImageField,
  MonthField,
  NumberField,
  PasswordField,
  RadioField,
  RangeField,
  ResetField,
  SearchField,
  SubmitField,
  TelField,
  TextField,
  TimeField,
  UrlField,
  WeekField
} = InputComponents;
exports.WeekField = WeekField;
exports.UrlField = UrlField;
exports.TimeField = TimeField;
exports.TextField = TextField;
exports.TelField = TelField;
exports.SubmitField = SubmitField;
exports.SearchField = SearchField;
exports.ResetField = ResetField;
exports.RangeField = RangeField;
exports.RadioField = RadioField;
exports.PasswordField = PasswordField;
exports.NumberField = NumberField;
exports.MonthField = MonthField;
exports.ImageField = ImageField;
exports.HiddenField = HiddenField;
exports.FileField = FileField;
exports.EmailField = EmailField;
exports.DatetimeLocalField = DatetimeLocalField;
exports.DateField = DateField;
exports.ColorField = ColorField;
exports.ButtonField = ButtonField;