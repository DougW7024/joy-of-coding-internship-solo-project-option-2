"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.useRegister = void 0;
var _reactHookForm = require("react-hook-form");
var _coercion = require("./coercion");
/**
 * useRegister
 *
 * Register the field into `react-hook-form` with defaults.
 *
 * @remarks
 *
 * A field's `validation` prop is `react-hook-form`'s `RegisterOptions`
 * (with Redwood's extended `valueAs` props).
 *
 * @see {@link https://react-hook-form.com/api/useform/register}
 */
const useRegister = (props, ref, emptyAs) => {
  const {
    register
  } = (0, _reactHookForm.useFormContext)();
  const {
    name
  } = props;
  if (!name) {
    throw Error('`name` prop must be provided');
  }
  const validation = props.validation || {
    required: false
  };
  (0, _coercion.setCoercion)(validation, {
    type: props.type,
    name,
    emptyAs
  });
  const {
    ref: _ref,
    onBlur: handleBlur,
    onChange: handleChange,
    ...rest
  } = register(name, validation);
  const onBlur = event => {
    handleBlur(event);
    props.onBlur?.(event);
  };
  const onChange = event => {
    handleChange(event);
    props.onChange?.(event);
  };
  return {
    ...rest,
    ref: element => {
      _ref(element);
      if (typeof ref === 'function') {
        ref(element);
      } else if (ref) {
        ref.current = element;
      }
    },
    onBlur,
    onChange
  };
};
exports.useRegister = useRegister;