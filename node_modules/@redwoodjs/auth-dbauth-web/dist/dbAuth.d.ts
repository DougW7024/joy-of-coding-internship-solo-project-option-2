/// <reference types="react" />
import type { CurrentUser } from '@redwoodjs/auth';
import type { WebAuthnClientType } from './webAuthn';
export interface LoginAttributes {
    username: string;
    password: string;
}
export interface ResetPasswordAttributes {
    resetToken: string;
    password: string;
}
export type SignupAttributes = Record<string, unknown> & LoginAttributes;
export declare function createAuth(dbAuthClient: ReturnType<typeof createDbAuthClient>, customProviderHooks?: {
    useCurrentUser?: () => Promise<CurrentUser>;
    useHasRole?: (currentUser: CurrentUser | null) => (rolesToCheck: string | string[]) => boolean;
}): {
    AuthContext: import("react").Context<import("@redwoodjs/auth").AuthContextInterface<string, LoginAttributes, any, unknown, boolean, SignupAttributes, any, any, ResetPasswordAttributes, any, any, import("./webAuthn").default> | undefined>;
    AuthProvider: ({ children, skipFetchCurrentUser, }: import("@redwoodjs/auth/dist/AuthProvider/AuthProvider").AuthProviderProps) => import("react").JSX.Element;
    useAuth: () => import("@redwoodjs/auth").AuthContextInterface<string, LoginAttributes, any, unknown, boolean, SignupAttributes, any, any, ResetPasswordAttributes, any, any, import("./webAuthn").default>;
};
export interface DbAuthClientArgs {
    webAuthn?: InstanceType<WebAuthnClientType>;
    dbAuthUrl?: string;
    fetchConfig?: {
        credentials?: 'include' | 'same-origin';
    };
}
export declare function createDbAuthClient({ webAuthn, dbAuthUrl, fetchConfig, }?: DbAuthClientArgs): {
    type: string;
    client: import("./webAuthn").default | undefined;
    login: ({ username, password }: LoginAttributes) => Promise<any>;
    logout: () => Promise<boolean>;
    signup: (attributes: SignupAttributes) => Promise<any>;
    getToken: () => Promise<string | null>;
    getUserMetadata: () => Promise<string | null>;
    forgotPassword: (username: string) => Promise<any>;
    resetPassword: (attributes: ResetPasswordAttributes) => Promise<any>;
    validateResetToken: (resetToken: string | null) => Promise<any>;
};
//# sourceMappingURL=dbAuth.d.ts.map