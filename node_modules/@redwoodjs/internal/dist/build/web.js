"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.prebuildWebFiles = exports.cleanWebBuild = exports.buildWeb = void 0;
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _fsExtra = require("fs-extra");
var _babelConfig = require("@redwoodjs/babel-config");
var _projectConfig = require("@redwoodjs/project-config");
// @MARK
// This whole file is currently only used in testing
// we may eventually use this to pretranspile the web side

const cleanWebBuild = () => {
  const rwjsPaths = (0, _projectConfig.getPaths)();
  (0, _fsExtra.removeSync)(rwjsPaths.web.dist);
  (0, _fsExtra.removeSync)(_path.default.join(rwjsPaths.generated.prebuild, 'web'));
};

/**
 * Remove RedwoodJS "magic" from a user's code leaving JavaScript behind.
 *
 * Currently only used for debugging purposes
 */
exports.cleanWebBuild = cleanWebBuild;
const prebuildWebFiles = (srcFiles, flags) => {
  const rwjsPaths = (0, _projectConfig.getPaths)();
  return (0, _map.default)(srcFiles).call(srcFiles, srcPath => {
    const relativePathFromSrc = _path.default.relative(rwjsPaths.base, srcPath);
    const dstPath = _path.default.join(rwjsPaths.generated.prebuild, relativePathFromSrc).replace(/\.(ts)$/, '.js');
    const result = (0, _babelConfig.prebuildWebFile)(srcPath, flags);
    if (!result?.code) {
      console.warn('Error:', srcPath, 'could not prebuilt.');
      return undefined;
    }
    _fs.default.mkdirSync(_path.default.dirname(dstPath), {
      recursive: true
    });
    _fs.default.writeFileSync(dstPath, result.code);
    return dstPath;
  });
};
exports.prebuildWebFiles = prebuildWebFiles;
/**
 * Builds the web side with Vite, but not used in the buildHandler currently
 * because we want to set the process.cwd to web.base
 */
const buildWeb = async ({
  verbose
}) => {
  // @NOTE: Using dynamic import, because vite is still opt-in
  const {
    build
  } = await import('vite');
  const viteConfig = (0, _projectConfig.getPaths)().web.viteConfig;
  if (process.cwd() !== (0, _projectConfig.getPaths)().web.base) {
    throw new Error('Looks like you are running the command from the wrong dir, this can lead to unintended consequences on CSS processing');
  }
  if (!viteConfig) {
    throw new Error('Could not locate your web/vite.config.{js,ts} file');
  }
  return build({
    configFile: viteConfig,
    envFile: false,
    logLevel: verbose ? 'info' : 'warn'
  });
};
exports.buildWeb = buildWeb;