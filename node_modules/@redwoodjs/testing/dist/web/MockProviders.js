"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.MockProviders = void 0;
var _react = _interopRequireDefault(require("react"));
var _auth = require("@redwoodjs/auth");
var _router = require("@redwoodjs/router");
var _web = require("@redwoodjs/web");
var _apollo = require("@redwoodjs/web/apollo");
var _MockParamsProvider = require("./MockParamsProvider");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * NOTE: This module should not contain any nodejs functionality,
 * because it's also used by Storybook in the browser.
 */

// @ts-expect-error - We inject useAuth when testing, so it will be available

// Import the user's Routes from `./web/src/Routes.{tsx,jsx}`,
// we pass the `children` from the user's Routes to `./MockRouter.Router`
// so that we can populate the `routes object` in Storybook and tests.
let UserRoutes;

// we need to do this to avoid "Could not resolve "~__REDWOOD__USER_ROUTES_FOR_MOCK"" errors
try {
  const userRoutesModule = require('~__REDWOOD__USER_ROUTES_FOR_MOCK');
  UserRoutes = userRoutesModule.default;
} catch (error) {
  UserRoutes = () => /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
}

// TODO(pc): see if there are props we want to allow to be passed into our mock provider (e.g. AuthProviderProps)
const MockProviders = ({
  children
}) => {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_web.RedwoodProvider, {
    titleTemplate: "%PageTitle | %AppTitle",
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_apollo.RedwoodApolloProvider, {
      useAuth: _auth.useAuth,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(UserRoutes, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_router.LocationProvider, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MockParamsProvider.MockParamsProvider, {
          children: children
        })
      })]
    })
  });
};
exports.MockProviders = MockProviders;