"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.SSELink = void 0;
var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/bind"));
var _core = require("@apollo/client/core");
var _graphql = require("graphql");
var _graphqlSse = require("graphql-sse");
const mapCredentialsHeader = httpLinkCredentials => {
  if (!httpLinkCredentials) {
    return undefined;
  }
  switch (httpLinkCredentials) {
    case 'omit':
    case 'same-origin':
    case 'include':
      return httpLinkCredentials;
    default:
      return undefined;
  }
};
const mapReferrerPolicyHeader = referrerPolicy => {
  if (!referrerPolicy) {
    return undefined;
  }
  switch (referrerPolicy) {
    case 'no-referrer':
    case 'no-referrer-when-downgrade':
    case 'same-origin':
    case 'origin':
    case 'strict-origin':
    case 'origin-when-cross-origin':
    case 'strict-origin-when-cross-origin':
    case 'unsafe-url':
      return referrerPolicy;
    default:
      return undefined;
  }
};

/**
 * GraphQL over Server-Sent Events (SSE) spec link for Apollo Client
 */
class SSELink extends _core.ApolloLink {
  constructor(options) {
    super();
    this.client = void 0;
    const {
      url,
      auth,
      headers,
      httpLinkConfig
    } = options;
    const {
      credentials,
      referrer,
      referrerPolicy
    } = httpLinkConfig?.headers || {};
    this.client = (0, _graphqlSse.createClient)({
      url,
      headers: async () => {
        const token = await auth.tokenFn();

        // Only add auth headers when there's a token. `token` is `null` when `!isAuthenticated`.
        if (!token) {
          return {
            ...headers
          };
        }
        return {
          Authorization: `Bearer ${token}`,
          'auth-provider': auth.authProviderType,
          ...headers
        };
      },
      credentials: mapCredentialsHeader(credentials),
      referrer,
      referrerPolicy: mapReferrerPolicyHeader(referrerPolicy)
    });
  }
  request(operation) {
    return new _core.Observable(sink => {
      var _context, _context2, _context3;
      return this.client.subscribe({
        ...operation,
        query: (0, _graphql.print)(operation.query)
      }, {
        next: (0, _bind.default)(_context = sink.next).call(_context, sink),
        complete: (0, _bind.default)(_context2 = sink.complete).call(_context2, sink),
        error: (0, _bind.default)(_context3 = sink.error).call(_context3, sink)
      });
    });
  }
}
exports.SSELink = SSELink;