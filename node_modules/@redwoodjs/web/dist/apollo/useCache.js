"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.useCache = void 0;
var _client = require("@apollo/client");
/**
 * Apollo Client stores the results of your GraphQL queries in a local, normalized, in-memory cache.
 *
 * useCache is a custom hook that returns the cache object and some useful methods to interact with the cache.
 */
const useCache = () => {
  const client = (0, _client.useApolloClient)();
  const cache = client.cache;

  /**
   *  Returns a serialized representation of the cache's current contents
   */
  const extract = function () {
    let optimistic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return cache.extract(optimistic);
  };

  /**
   * If a type in your cache uses a custom cache ID (or even if it doesn't),
   * you can use the cache.identify method to obtain the cache ID for an object of that type.
   *
   * This method takes an object and computes its ID based on both its __typename and its identifier field(s).
   * This means you don't have to keep track of which fields make up each type's cache ID.
   *
   * @see https://www.apollographql.com/docs/react/caching/cache-interaction#obtaining-an-objects-cache-id
   */
  const identify = object => {
    return {
      id: cache.identify(object)
    };
  };

  /**
   * Modifies one or more field values of a cached object.
   * Must provide a modifier function for each field to modify. A modifier function takes a cached field's current value and returns the value that should replace it.
   *
   * Returns true if the cache was modified successfully and false otherwise.
   *
   * @see https://www.apollographql.com/docs/react/caching/cache-interaction/#using-cachemodify
   */
  const modify = (object, fields) => {
    return cache.modify({
      ...identify(object),
      fields
    });
  };

  /**
   * Either removes a normalized object from the cache or removes a specific field from a normalized object in the cache.
   */
  const evict = object => {
    return cache.evict(identify(object));
  };

  /**
   * Reset the cache entirely, such as when a user logs out.
   *
   * @see https://www.apollographql.com/docs/react/caching/advanced-topics#resetting-the-cache
   */
  const resetStore = () => {
    return client.resetStore();
  };

  /**
   * To reset the cache without refetching active queries, use the clearStore method.
   *
   * @see https://www.apollographql.com/docs/react/caching/advanced-topics#resetting-the-cache
   */
  const clearStore = () => {
    return client.clearStore();
  };
  return {
    cache,
    evict,
    extract,
    identify,
    modify,
    resetStore,
    clearStore
  };
};
exports.useCache = useCache;