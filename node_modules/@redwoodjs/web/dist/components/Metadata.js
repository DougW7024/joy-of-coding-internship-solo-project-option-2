"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.Metadata = void 0;
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/is-array"));
var _flatMap = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/flat-map"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/entries"));
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));
var _reverse = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/reverse"));
var _flat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/flat"));
var _react = _interopRequireDefault(require("react"));
var _reactHelmetAsync = require("react-helmet-async");
var _jsxRuntime = require("react/jsx-runtime");
const EXCLUDE_PROPS = ['charSet'];
const propToMetaTag = (parentKey, parentValue, options) => {
  if ((0, _isArray.default)(parentValue)) {
    // array of attributes
    return (0, _flatMap.default)(parentValue).call(parentValue, value => {
      return propToMetaTag(parentKey, value, options);
    });
  } else if (typeof parentValue === 'object') {
    var _context, _context2;
    // namespaced attributes, <meta> name attribute changes to 'property'
    return (0, _flatMap.default)(_context = (0, _filter.default)(_context2 = (0, _entries.default)(parentValue)).call(_context2, _ref => {
      let [_, v] = _ref;
      return v !== null;
    })).call(_context, _ref2 => {
      let [key, value] = _ref2;
      return propToMetaTag(`${parentKey}:${key}`, value, {
        attr: 'property'
      });
    });
  } else {
    // plain text
    const attributes = {
      [options['attr']]: parentKey,
      content: parentValue
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("meta", {
      ...attributes
    });
  }
};

/**
 * Add commonly used `<meta>` tags for unfurling/seo purposes
 * using the open graph protocol https://ogp.me/
 * @example
 * <Metadata title="About Page" og={{ image: "/static/about-og.png" }} />
 */
const Metadata = props => {
  var _context3, _context4, _context5;
  const {
    children,
    ...metaProps
  } = props;
  const Head = _reactHelmetAsync.Helmet;
  const tags = (0, _filter.default)(_context3 = (0, _flatMap.default)(_context4 = (0, _filter.default)(_context5 = (0, _entries.default)(metaProps)).call(_context5, _ref3 => {
    let [key, value] = _ref3;
    return !(0, _includes.default)(EXCLUDE_PROPS).call(EXCLUDE_PROPS, key) && value !== null && (key !== 'og' || value !== true);
  })).call(_context4, _ref4 => {
    let [key, value] = _ref4;
    return propToMetaTag(key, value, {
      attr: 'name'
    });
  })).call(_context3, tag => !!tag);

  // custom overrides
  if (metaProps.title) {
    var _context6, _context7, _context8;
    ;
    (0, _map.default)(_context6 = (0, _reverse.default)(_context7 = (0, _flat.default)(_context8 = [metaProps.title]).call(_context8)).call(_context7)).call(_context6, title => {
      tags.unshift( /*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
        children: title
      }));
    });
  }
  if (metaProps.charSet) {
    tags.push( /*#__PURE__*/(0, _jsxRuntime.jsx)("meta", {
      charSet: metaProps.charSet
    }));
  }
  if (metaProps.og) {
    // add title and og:title
    if (metaProps.title && !metaProps.og.title && metaProps.og.title !== null) {
      tags.push( /*#__PURE__*/(0, _jsxRuntime.jsx)("meta", {
        property: "og:title",
        content: metaProps.title
      }));
    }

    // add og:description
    if (metaProps.description && !metaProps.og.description && metaProps.og.description !== null) {
      tags.push( /*#__PURE__*/(0, _jsxRuntime.jsx)("meta", {
        property: "og:description",
        content: metaProps.description
      }));
    }

    // add og:type
    if (!metaProps.og.type && metaProps.og.type !== null) {
      tags.push( /*#__PURE__*/(0, _jsxRuntime.jsx)("meta", {
        property: "og:type",
        content: "website"
      }));
    }
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Head, {
    children: [(0, _map.default)(tags).call(tags, (tag, i) => /*#__PURE__*/_react.default.cloneElement(tag, {
      key: i
    })), children]
  });
};
exports.Metadata = Metadata;