"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLHooksProvider = exports.GraphQLHooksContext = void 0;
exports.useMutation = useMutation;
exports.useQuery = useQuery;
exports.useSubscription = useSubscription;
var _react = _interopRequireDefault(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
const GraphQLHooksContext = exports.GraphQLHooksContext = _react.default.createContext({
  useQuery: () => {
    throw new Error('You must register a useQuery hook via the `GraphQLHooksProvider`');
  },
  useMutation: () => {
    throw new Error('You must register a useMutation hook via the `GraphQLHooksProvider`');
  },
  useSubscription: () => {
    throw new Error('You must register a useSubscription hook via the `GraphQLHooksProvider`');
  }
});
/**
 * GraphQLHooksProvider stores standard `useQuery` and `useMutation` hooks for Redwood
 * that can be mapped to your GraphQL library of choice's own `useQuery`
 * and `useMutation` implementation.
 *
 * @todo Let the user pass in the additional type for options.
 */
const GraphQLHooksProvider = _ref => {
  let {
    useQuery,
    useMutation,
    useSubscription,
    children
  } = _ref;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(GraphQLHooksContext.Provider, {
    value: {
      useQuery,
      useMutation,
      useSubscription
    },
    children: children
  });
};
exports.GraphQLHooksProvider = GraphQLHooksProvider;
function useQuery(query, options) {
  return _react.default.useContext(GraphQLHooksContext).useQuery(query, options);
}
function useMutation(mutation, options) {
  return _react.default.useContext(GraphQLHooksContext).useMutation(mutation, options);
}
function useSubscription(query, options) {
  return _react.default.useContext(GraphQLHooksContext).useSubscription(query, options);
}