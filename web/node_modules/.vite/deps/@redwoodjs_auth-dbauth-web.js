import {
  require_for_each,
  require_keys
} from "./chunk-7SMCR6UX.js";
import {
  require_stringify
} from "./chunk-ZNUYSFG4.js";
import {
  require_cjs
} from "./chunk-YQYSMPXZ.js";
import "./chunk-VYX2O666.js";
import {
  require_interopRequireDefault
} from "./chunk-NRWAR2OR.js";
import {
  require_define_property2 as require_define_property
} from "./chunk-X6KK2XJU.js";
import "./chunk-TG2HHWBU.js";
import {
  __commonJS
} from "./chunk-2GTGKKMZ.js";

// ../node_modules/@redwoodjs/auth-dbauth-web/dist/dbAuth.js
var require_dbAuth = __commonJS({
  "../node_modules/@redwoodjs/auth-dbauth-web/dist/dbAuth.js"(exports) {
    "use strict";
    var _Object$defineProperty = require_define_property();
    var _interopRequireDefault = require_interopRequireDefault().default;
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createAuth = createAuth;
    exports.createDbAuthClient = createDbAuthClient;
    var _stringify = _interopRequireDefault(require_stringify());
    var _auth = require_cjs();
    var TOKEN_CACHE_TIME = 5e3;
    function createAuth(dbAuthClient, customProviderHooks) {
      return (0, _auth.createAuthentication)(dbAuthClient, customProviderHooks);
    }
    function createDbAuthClient({
      webAuthn,
      dbAuthUrl,
      fetchConfig
    } = {}) {
      const credentials = (fetchConfig == null ? void 0 : fetchConfig.credentials) || "same-origin";
      webAuthn == null ? void 0 : webAuthn.setAuthApiUrl(dbAuthUrl);
      let getTokenPromise;
      let lastTokenCheckAt = /* @__PURE__ */ new Date("1970-01-01T00:00:00");
      let cachedToken;
      const getApiDbAuthUrl = () => {
        return dbAuthUrl || `${RWJS_API_URL}/auth`;
      };
      const resetAndFetch = async (...params) => {
        resetTokenCache();
        return fetch(...params);
      };
      const isTokenCacheExpired = () => {
        const now = /* @__PURE__ */ new Date();
        return now.getTime() - lastTokenCheckAt.getTime() > TOKEN_CACHE_TIME;
      };
      const resetTokenCache = () => {
        lastTokenCheckAt = /* @__PURE__ */ new Date("1970-01-01T00:00:00");
        cachedToken = null;
      };
      const forgotPassword = async (username) => {
        const response = await resetAndFetch(getApiDbAuthUrl(), {
          credentials,
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: (0, _stringify.default)({
            username,
            method: "forgotPassword"
          })
        });
        return response.json();
      };
      const getToken = async () => {
        if (getTokenPromise) {
          return getTokenPromise;
        }
        if (isTokenCacheExpired()) {
          getTokenPromise = fetch(`${getApiDbAuthUrl()}?method=getToken`, {
            credentials
          }).then((response) => response.text()).then((tokenText) => {
            lastTokenCheckAt = /* @__PURE__ */ new Date();
            cachedToken = tokenText.length === 0 ? null : tokenText;
            return cachedToken;
          }).catch(() => {
            return null;
          }).finally(() => {
            getTokenPromise = null;
          });
          return getTokenPromise;
        }
        return cachedToken;
      };
      const login = async ({
        username,
        password
      }) => {
        const response = await resetAndFetch(getApiDbAuthUrl(), {
          credentials,
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: (0, _stringify.default)({
            username,
            password,
            method: "login"
          })
        });
        return response.json();
      };
      const logout = async () => {
        await resetAndFetch(getApiDbAuthUrl(), {
          credentials,
          method: "POST",
          body: (0, _stringify.default)({
            method: "logout"
          })
        });
        return true;
      };
      const resetPassword = async (attributes) => {
        const response = await resetAndFetch(getApiDbAuthUrl(), {
          credentials,
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: (0, _stringify.default)({
            ...attributes,
            method: "resetPassword"
          })
        });
        return response.json();
      };
      const signup = async (attributes) => {
        const response = await resetAndFetch(getApiDbAuthUrl(), {
          credentials,
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: (0, _stringify.default)({
            ...attributes,
            method: "signup"
          })
        });
        return response.json();
      };
      const validateResetToken = async (resetToken) => {
        const response = await resetAndFetch(getApiDbAuthUrl(), {
          credentials,
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: (0, _stringify.default)({
            resetToken,
            method: "validateResetToken"
          })
        });
        return response.json();
      };
      return {
        type: "dbAuth",
        client: webAuthn,
        login,
        logout,
        signup,
        getToken,
        getUserMetadata: getToken,
        forgotPassword,
        resetPassword,
        validateResetToken
      };
    }
  }
});

// ../node_modules/@redwoodjs/auth-dbauth-web/dist/index.js
var require_dist = __commonJS({
  "../node_modules/@redwoodjs/auth-dbauth-web/dist/index.js"(exports) {
    var _context;
    var _Object$defineProperty = require_define_property();
    var _forEachInstanceProperty = require_for_each();
    var _Object$keys = require_keys();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    var _dbAuth = require_dbAuth();
    _forEachInstanceProperty(_context = _Object$keys(_dbAuth)).call(_context, function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _dbAuth[key])
        return;
      _Object$defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _dbAuth[key];
        }
      });
    });
  }
});
export default require_dist();
//# sourceMappingURL=@redwoodjs_auth-dbauth-web.js.map
