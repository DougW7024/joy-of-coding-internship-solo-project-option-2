import {
  require_classof_raw,
  require_es_json_stringify,
  require_export,
  require_fails,
  require_function_apply,
  require_function_call,
  require_function_uncurry_this,
  require_path,
  require_require_object_coercible,
  require_to_integer_or_infinity,
  require_to_length,
  require_to_object,
  require_to_primitive,
  require_to_string
} from "./chunk-X6KK2XJU.js";
import {
  __commonJS
} from "./chunk-2GTGKKMZ.js";

// ../node_modules/core-js-pure/internals/string-repeat.js
var require_string_repeat = __commonJS({
  "../node_modules/core-js-pure/internals/string-repeat.js"(exports, module) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var $RangeError = RangeError;
    module.exports = function repeat(count) {
      var str = toString(requireObjectCoercible(this));
      var result = "";
      var n = toIntegerOrInfinity(count);
      if (n < 0 || n === Infinity)
        throw new $RangeError("Wrong number of repetitions");
      for (; n > 0; (n >>>= 1) && (str += str))
        if (n & 1)
          result += str;
      return result;
    };
  }
});

// ../node_modules/core-js-pure/internals/string-pad.js
var require_string_pad = __commonJS({
  "../node_modules/core-js-pure/internals/string-pad.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toLength = require_to_length();
    var toString = require_to_string();
    var $repeat = require_string_repeat();
    var requireObjectCoercible = require_require_object_coercible();
    var repeat = uncurryThis($repeat);
    var stringSlice = uncurryThis("".slice);
    var ceil = Math.ceil;
    var createMethod = function(IS_END) {
      return function($this, maxLength, fillString) {
        var S = toString(requireObjectCoercible($this));
        var intMaxLength = toLength(maxLength);
        var stringLength = S.length;
        var fillStr = fillString === void 0 ? " " : toString(fillString);
        var fillLen, stringFiller;
        if (intMaxLength <= stringLength || fillStr === "")
          return S;
        fillLen = intMaxLength - stringLength;
        stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
        if (stringFiller.length > fillLen)
          stringFiller = stringSlice(stringFiller, 0, fillLen);
        return IS_END ? S + stringFiller : stringFiller + S;
      };
    };
    module.exports = {
      // `String.prototype.padStart` method
      // https://tc39.es/ecma262/#sec-string.prototype.padstart
      start: createMethod(false),
      // `String.prototype.padEnd` method
      // https://tc39.es/ecma262/#sec-string.prototype.padend
      end: createMethod(true)
    };
  }
});

// ../node_modules/core-js-pure/internals/date-to-iso-string.js
var require_date_to_iso_string = __commonJS({
  "../node_modules/core-js-pure/internals/date-to-iso-string.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var padStart = require_string_pad().start;
    var $RangeError = RangeError;
    var $isFinite = isFinite;
    var abs = Math.abs;
    var DatePrototype = Date.prototype;
    var nativeDateToISOString = DatePrototype.toISOString;
    var thisTimeValue = uncurryThis(DatePrototype.getTime);
    var getUTCDate = uncurryThis(DatePrototype.getUTCDate);
    var getUTCFullYear = uncurryThis(DatePrototype.getUTCFullYear);
    var getUTCHours = uncurryThis(DatePrototype.getUTCHours);
    var getUTCMilliseconds = uncurryThis(DatePrototype.getUTCMilliseconds);
    var getUTCMinutes = uncurryThis(DatePrototype.getUTCMinutes);
    var getUTCMonth = uncurryThis(DatePrototype.getUTCMonth);
    var getUTCSeconds = uncurryThis(DatePrototype.getUTCSeconds);
    module.exports = fails(function() {
      return nativeDateToISOString.call(new Date(-5e13 - 1)) !== "0385-07-25T07:06:39.999Z";
    }) || !fails(function() {
      nativeDateToISOString.call(/* @__PURE__ */ new Date(NaN));
    }) ? function toISOString() {
      if (!$isFinite(thisTimeValue(this)))
        throw new $RangeError("Invalid time value");
      var date = this;
      var year = getUTCFullYear(date);
      var milliseconds = getUTCMilliseconds(date);
      var sign = year < 0 ? "-" : year > 9999 ? "+" : "";
      return sign + padStart(abs(year), sign ? 6 : 4, 0) + "-" + padStart(getUTCMonth(date) + 1, 2, 0) + "-" + padStart(getUTCDate(date), 2, 0) + "T" + padStart(getUTCHours(date), 2, 0) + ":" + padStart(getUTCMinutes(date), 2, 0) + ":" + padStart(getUTCSeconds(date), 2, 0) + "." + padStart(milliseconds, 3, 0) + "Z";
    } : nativeDateToISOString;
  }
});

// ../node_modules/core-js-pure/modules/es.date.to-json.js
var require_es_date_to_json = __commonJS({
  "../node_modules/core-js-pure/modules/es.date.to-json.js"() {
    "use strict";
    var $ = require_export();
    var call = require_function_call();
    var toObject = require_to_object();
    var toPrimitive = require_to_primitive();
    var toISOString = require_date_to_iso_string();
    var classof = require_classof_raw();
    var fails = require_fails();
    var FORCED = fails(function() {
      return (/* @__PURE__ */ new Date(NaN)).toJSON() !== null || call(Date.prototype.toJSON, { toISOString: function() {
        return 1;
      } }) !== 1;
    });
    $({ target: "Date", proto: true, forced: FORCED }, {
      // eslint-disable-next-line no-unused-vars -- required for `.length`
      toJSON: function toJSON(key) {
        var O = toObject(this);
        var pv = toPrimitive(O, "number");
        return typeof pv == "number" && !isFinite(pv) ? null : !("toISOString" in O) && classof(O) === "Date" ? call(toISOString, O) : O.toISOString();
      }
    });
  }
});

// ../node_modules/core-js-pure/es/json/stringify.js
var require_stringify = __commonJS({
  "../node_modules/core-js-pure/es/json/stringify.js"(exports, module) {
    "use strict";
    require_es_date_to_json();
    require_es_json_stringify();
    var path = require_path();
    var apply = require_function_apply();
    if (!path.JSON)
      path.JSON = { stringify: JSON.stringify };
    module.exports = function stringify(it, replacer, space) {
      return apply(path.JSON.stringify, null, arguments);
    };
  }
});

// ../node_modules/core-js-pure/stable/json/stringify.js
var require_stringify2 = __commonJS({
  "../node_modules/core-js-pure/stable/json/stringify.js"(exports, module) {
    "use strict";
    var parent = require_stringify();
    module.exports = parent;
  }
});

// ../node_modules/core-js-pure/actual/json/stringify.js
var require_stringify3 = __commonJS({
  "../node_modules/core-js-pure/actual/json/stringify.js"(exports, module) {
    "use strict";
    var parent = require_stringify2();
    module.exports = parent;
  }
});

// ../node_modules/core-js-pure/full/json/stringify.js
var require_stringify4 = __commonJS({
  "../node_modules/core-js-pure/full/json/stringify.js"(exports, module) {
    "use strict";
    var parent = require_stringify3();
    module.exports = parent;
  }
});

// ../node_modules/core-js-pure/features/json/stringify.js
var require_stringify5 = __commonJS({
  "../node_modules/core-js-pure/features/json/stringify.js"(exports, module) {
    "use strict";
    module.exports = require_stringify4();
  }
});

// ../node_modules/@babel/runtime-corejs3/core-js/json/stringify.js
var require_stringify6 = __commonJS({
  "../node_modules/@babel/runtime-corejs3/core-js/json/stringify.js"(exports, module) {
    module.exports = require_stringify5();
  }
});

export {
  require_string_pad,
  require_stringify6 as require_stringify
};
//# sourceMappingURL=chunk-ZNUYSFG4.js.map
